#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# AUTHOR:  BaiLiang , bailiangcn@gmail.com
# Last Change:  2009-11-21 19:47:17


"""
测试数据库模块 selectwork.py
"""

__revision__ = '0.1'




from unittest import TestCase
import pickle
import datetime
import pymssql

import sys , os
sys.path.append(os.curdir)
sys.path.append(os.pardir)

from selectwork import *


class TestSqlAdo(TestCase):
    "测试SqlAdo类"

    def setUp(self):

        self.dbf = SqlAdo()

    def tearDown(self):
        pass

    def testget_build_sql(self):
        "测试生成取楼号语句"
        print self.dbf.get_build_sql(())

    def testget_build_list(self):
        "测试取楼号列表"
        res = self.dbf.get_build_list()
        #保存数据库查询结果，用于在连接不上数据库的情况下进行测试
        pickle.dump(res, open('dbase', 'w'))


    def testget_last_day(self):
        "测试get_last_day方法，返回前lastday天数的日期时间值"
        knowvalues = (('20091001', 3, '20091004'), )
        for tempres, lastday, begday in knowvalues:
            res = datetime.datetime.strptime(tempres, '%Y%m%d')
            self.dbf.getoffsetday = lastday
            self.dbf.beginday = begday
            tempres = self.dbf.get_last_day()
            self.assertEqual(res, tempres)

    def testget_worklit_sql(self):
            "生成用于检索符合条件的报修列表字符串的截止时间函数是否正确,如果错误，请检查leftnum是否正确设置"
            resstr1 = "select bxls.报修编号,报修时间,用户地址,用户电话,gzlb.故障名称,tbldepartment.电话,tblperson.姓名,tbldepartment.登录时间 from bxls,gzlb,tbldepartment,tblperson where bxls.故障id=gzlb.故障编号 and bxls.维修队编号=tbldepartment.部门编号 and 报单状态id =0 and 报修时间>'"

            lefttime = datetime.datetime.now()-datetime.datetime(2009,10, 26) 
            #距离2009年10月26日多少天
            leftnum = lefttime.days
            knowvalues = ((3, "20091023"), (4, "20091022"), (26, "20090930"),
                    (0, "20091026"), (1000, "20070130"),  (3000, "20010809"))
            resstr4 = "' and 登录时间<'"   
            resstr5 = "' and tbldepartment.部门编号=tblperson.部门编号 and tbldepartment.电话<>'' and 故障id<> 12 and tblperson.姓名 like '叮咚%' order by 登录时间 ,报修编号" 
            for i, resstr2 in knowvalues:
                self.dbf.getoffsetday = i + leftnum
                result = self.dbf.get_worklist_sql()
                lastlogin = datetime.datetime.now() - datetime.timedelta(minutes=30)
                lastloginstr = lastlogin.strftime("%Y%m%d %H:%M:%S")
                correctres = resstr1 + resstr2 + resstr4 + lastloginstr + resstr5
                self.assertEqual(result, correctres)

    def testget_accepted_sql(self):
        "测试get_accepted_sql方法,生成用于检索符合条件的报修列表字符串的截止时间函数是否正确"
        str1 = "select 报修编号 from bxls,tbldepartment where 报单状态id=1 and bxls.维修队编号 = tbldepartment.部门编号 and tbldepartment.电话='13339505100' and 报修时间 > '"
        str3 = "'  order by 报修编号"
        lefttime = datetime.datetime.now()-datetime.datetime(2009,11,01)
        str2 = self.dbf.get_last_day().strftime("%Y%m%d")
        self.dbf.updateoffsetday = 7
        result = self.dbf.get_accepted_sql(('13339505100',))
        resstr = ''.join((str1,str2,str3))
        self.assertEqual(result, resstr)
     
    def testupdate_send_ok_sql(self):
        "测试更新语句生成方法"
        knowvalues = ((0,59860,"update bxls set 报单状态id=0,接单人员='test',接单时间=getdate() where 报修编号=59860"),
                (1,59860,"update bxls set 报单状态id=1,接单人员='test',接单时间=getdate() where 报修编号=59860"))
        for stat,workid,resustr in knowvalues:
            self.assertEqual( self.dbf.update_send_ok_sql((workid,
                stat, 'test')), resustr)

    def testupdate_work_result_sql(self):
        "测试update_work_result_sql方法"
        knowvalues = (([123,234],"update bxls set 报单状态id=2,维修人员=bxls.接单人员,修复时间=getdate() where 报修编号=123 or 报修编号=234"),)
        for source, sqlstr in knowvalues:
            resstr = self.dbf.update_work_result_sql(source)
            self.assertEqual(sqlstr, resstr)

    def testrun_select_sql(self):
        "测试运行run_sql方法"
    
        res = self.dbf.run_select_sql(self.dbf.get_worklist_sql)
        if res:
            self.assertEqual(list, type(res))

    def testget_worklist(self):
        "测试get_worklist方法"

        res = self.dbf.get_worklist()
        if len(res) > 0:
            self.assertEqual(Task, type(res[0]))

    def testrun_update_sql(self):
        "测试ren_update_sql方法"

        res = self.dbf.run_update_sql(self.dbf.update_send_ok_sql,
                (63202,1,'test'))
        self.assertEqual(1,res)

    def testget_accepted_list(self):
        "测试get_accepted_list方法"

        res = self.dbf.get_accepted_list('13339505100')
        self.assertEqual(list, type(res))


    def testupdate_send_ok(self):
        "测试update_send_ok方法"

        res = self.dbf.update_send_ok(63202,'aaa')
        self.assertEqual(1,res)

    def testupdat_work_result(self):
        "测试update_work_result方法"

        res = self.dbf.update_work_result([63202])
        self.assertEqual(1, res)

###########################################################################        

    def testenlarge(self):
        "测试enlarge方法，能够自动根据大小值生成队列"
        resultvalues=(("1234",False),("a12",False), 
                ("123  129\x00",["123","124","125","126","127","128","129"]),
                ("129123",["123","124","125","126","127","128","129"]),
                ("123123",["123"]),
                ("998005",["998",'999','000','001','002','003','004','005']),
                )
        for soustr,reslist in resultvalues:
            res=self.dbf.enlarge(soustr)
            self.assertEqual(res,reslist)
           
    def testmake_dict(self):
        "测试makedict方法"
        knowvalues=([[62123,456789,37100,38100],False],
               [[62123,456789,37100],{123:62123,789:456789,100:37100}] )
        for sourcevalues,resknow in knowvalues:
            res=self.dbf.make_dict(sourcevalues)
            self.assertEqual(res,resknow)

    def testinterworkid(self):
        "测试interworkid方法"
        knowvalues=(([62123,56789,35674],[789,333],[56789]),
                ([62123,56789,35674,34567],[789,567],[56789,34567]))
        for sqllist,smslist,resknow in knowvalues:
            res=self.dbf.inter_workid(sqllist,smslist)
            self.assertEqual(res,resknow)

    def testmakesmslist(self):
        "测试makesmslist方法"
        knowvalues = (('123#234#456',[123,234,456]),
                ('123#456460#678',[123,678,456,457,458,459,460]),
                ('123#4567#678',[123,678]),
                ('123#4567#67',[123]),('123',[123]),('998005',
                    [998,999,000,001,002,003,004,005]))
        for soustr,resknow in knowvalues:
            res=self.dbf.make_sms_list(soustr)
            self.assertEqual(res,resknow)

    def testhandleaccept(self):
        "测试handleaccept"

        phone='13339505100'
        knowvalues = (("345",1),)
        for message,resknow in knowvalues:
            res=self.dbf.handle_accept(phone,message)
            #self.assertEqual(res,resknow)


       

if '__main__' == __name__:
    import unittest
    unittest.main()






